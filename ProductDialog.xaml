<Window x:Class="DialogValidation.ProductDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:DialogValidation="clr-namespace:DialogValidation"         
        d:DataContext="{d:DesignInstance Type=DialogValidation:ProductItem}"
        mc:Ignorable="d"
        Title="ProductDialog" 
        SizeToContent="WidthAndHeight">

    <!-- 
        The above 
                d:DataContext="{d:DesignInstance Type=DialogValidation:ProductData}"
        Provides DataContext information in properties binding dialog, 
        therefore far less error prone than guessing from memory! 
    -->

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="DictionaryTextBox.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    
    <Grid Margin="4">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="200"/>
            <ColumnDefinition x:Name="Col2" Width="30"/>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>


        <TextBlock Grid.Column="0" Grid.Row="0" Text="Product Name" HorizontalAlignment="Right" Margin="4"/>
        <!-- 
        WPF is great for visual presentation, but error reporting can be obtuse. 
        This is especially so in regard to namespace references and references more genrally. 
        A reference error can, and will, throw seemingly unrelated errors.
        Have two such errors and ones sanity will be tested. -->

        <!-- TextBoxErrorStyle sets the TextBox.ToolTip to the validation error message when Validation.HasError = "True". -->
        <!-- TextBoxValidationErrorTemplate creates an exclimation mark within a red circle to the right of the text in error -->
        <TextBox 
            x:Name="ProductName" 
            Grid.Column="1" Grid.Row="0" Margin="4"                        
            Style="{StaticResource TextBoxErrorStyle}"            
            Validation.ErrorTemplate="{StaticResource TextBoxValidationErrorTemplate}">

            <!-- Text validation binding using the DataContext is easy and works. Relative - Ancestor binding should but I have had no luck. -->
            <TextBox.Text>
                <Binding Path="ProductName" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                    <Binding.ValidationRules>
                        <DialogValidation:ValidateNotEmpty ValidatesOnTargetUpdated="True"/>
                        <DialogValidation:ValidationNoProductNameDuplicate x:Name="NoDuplicates" ValidatesOnTargetUpdated="True"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <TextBlock Grid.Column="0" Grid.Row="1" Text="Product Description" HorizontalAlignment="Right" Margin="4"/>
        
        <TextBox 
            x:Name="ProductDescription" 
            Grid.Column="1" Grid.Row="1" Margin="4"                        
            Style="{StaticResource TextBoxErrorStyle}"            
            Validation.ErrorTemplate="{StaticResource TextBoxValidationErrorTemplate}">

            <!-- Text validation binding using the DataContext is easy and works. Relative - Ancestor binding should but I have had no luck. -->
            <TextBox.Text>
                <Binding Path="ProductDescription" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                    <Binding.ValidationRules>
                        <DialogValidation:ValidateNotEmpty ValidatesOnTargetUpdated="True"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>

        <TextBlock Grid.Column="0" Grid.Row="2" Text="Product Price"/>
        <!-- StringFormat requires {} to escape before the $ format {0:C} -->
        <TextBox
            x:Name="ProductPrice"
            Grid.Column="1" Grid.Row="2" Margin="4"
            Style="{StaticResource TextBoxErrorStyle}"            
            Validation.ErrorTemplate="{StaticResource TextBoxValidationErrorTemplate}">
            <TextBox.Text>
                <Binding Path="ProductPrice" StringFormat="{}{0:C}" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                    <Binding.ValidationRules>
                        <DialogValidation:ValidateNotEmpty ValidatesOnTargetUpdated="True" />
                        <DialogValidation:ValidatePrice MinPrice="0.00" MaxPrice="100.00" ValidatesOnTargetUpdated="True" />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
       
        <!-- OK and Cancel buttons -->
        <Grid Grid.ColumnSpan="3" Grid.Row="3" Margin="8">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="10"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
      
            <Button x:Name="OkButton" Grid.Column="0" Content="OK" IsDefault="True" FontWeight="Bold" Click="OkButton_Click">
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=ProductName, Path=(Validation.HasError)}" Value="false">
                                <Setter Property="IsEnabled" Value="True"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>

            <Button x:Name="CancelButton" Grid.Column="2" FontWeight="Bold" Content="Cancel" IsCancel="True" Click="CancelButton_Click"/>
            
        </Grid>
       
    </Grid>
</Window>
